class Solution {
public:
    vector<string> stringMatching(vector<string>& words) {
        vector <string> ans;
        vector <bool> switches(words.size(),false);
        for(int i=0;i<words.size();i++)
        {
            for(int j=0;j<words.size();j++)
            {
                if(i!=j)
                {
                    int x=0;
                    for(int k=0;k<words[i].size();k++)
                    {
                        int y=k;
                        while(words[i][y]==words[j][x]&&y<words[i].size())
                        {x++;y++;
                        if(x==words[j].size()&&switches[j]==false)
                        {ans.push_back(words[j]);
                        switches[j]=true;}}
                        x=0;
                    }
                }
            }
        }
        return ans;
    }
};


class Solution {
public:
    vector<string> stringMatching(vector<string>& words) {
        vector <string> ans;
        sort(words.begin(),words.end());
        for(int i=0;i<words.size();i++)
        {
            for(int j=0;j<words.size();j++)
            {
                if(i!=j && words[j].find(words[i]) != string::npos)
                {
                    ans.push_back(words[i]);
                    break;
                }
            }
        }
        return ans;
    }
};
